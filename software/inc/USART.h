//
// Created by marijn on 9/16/24.
//

#ifndef STM32F412_USART_H
#define STM32F412_USART_H
#include "periph.h"
#include "GPIO.h"
#include "sys.h"


/*!<
 * types
 * */
typedef enum {
	USART_PIN_DISABLE =	0x00000000UL,
	// USART1
	USART1_CK_A8 =		0x78000045UL,	USART1_TX_A9 =		0x79000045UL,
	USART1_RX_A10 =		0x7A000045UL,	USART1_CTS_A11 =	0x7B000045UL,
	USART1_RTS_A12 =	0x7C000045UL,	USART1_TX_A15 =		0x7F000045UL,
	USART1_RX_B3 =		0x73100045UL,	USART1_TX_B6 =		0x76100045UL,
	USART1_RX_B7 =		0x77100045UL,
	// USART2
	USART2_CTS_A0 =		0x70000114UL,	USART2_RTS_A1 =		0x71000114UL,
	USART2_TX_A2 =		0x72000114UL,	USART2_RX_A3 =		0x73000114UL,
	USART2_CK_A4 =		0x74000114UL,	USART2_CTS_D3 =		0x73300114UL,
	USART2_RTS_D4 =		0x74300114UL,	USART2_TX_D5 =		0x75300114UL,
	USART2_RX_D6 =		0x76300114UL,	USART2_CK_D7 =		0x77300114UL,
	// USART3
	USART3_TX_B10 =		0x7A100124UL,	USART3_RX_B11 =		0x7B100124UL,
	USART3_CK_B12 =		0x8C100124UL,	USART3_CTS_B13 =	0x8D100124UL,
	USART3_RTS_B14 =	0x7E100124UL,	USART3_RX_C5 =		0x75200124UL,
	USART3_TX_C10 =		0x7A200124UL,	USART3_RX_C11 =		0x7B200124UL,
	USART3_CK_C12 =		0x7C200124UL,	USART3_TX_D8 =		0x78300124UL,
	USART3_RX_D9 =		0x79300124UL,	USART3_CK_D10 =		0x7A300124UL,
	USART3_CTS_D11 =	0x7B300124UL,	USART3_RTS_D12 =	0x7C300124UL,
	// USART6
	USART6_TX_A11 =		0x8B000055UL,	USART6_RX_A12 =		0x8C000055UL,
	USART6_TX_C6 =		0x86200055UL,	USART6_RX_C7 =		0x87200055UL,
	USART6_CK_C8 =		0x88200055UL,	USART6_CK_G7 =		0x87600055UL,
	USART6_RTS_G8 =		0x88600055UL,	USART6_RX_G9 =		0x89600055UL,
	USART6_RTS_G12 =	0x8C600055UL,	USART6_CTS_G13 =	0x8D600055UL,
	USART6_TX_G14 =		0x8E600055UL,	USART6_CTS_G15 =	0x8F600055UL
} USART_GPIO_t;

typedef enum {
	USART_OVERSAMPLING_16 =	0,
	USART_OVERSAMPLING_8 =	1,
} USART_OS_t;


/*!< init / enable / disable */
void enable_USART(USART_t* usart);
void disable_USART(USART_t* usart);
void reset_USART(USART_t* usart);
// UART mode
void fconfig_UART(USART_GPIO_t tx, USART_GPIO_t rx, uint32_t baud, USART_OS_t oversampling);
void config_UART(USART_GPIO_t tx, USART_GPIO_t rx, uint32_t baud);
// IRQ
// TODO
/*!< input / output */
uint32_t USART_write(USART_t* usart, const uint8_t* buffer, uint32_t size, uint32_t timeout);
uint32_t USART_read(USART_t* usart, uint8_t* buffer, uint32_t size, uint32_t timeout);
uint8_t USART_print(USART_t* usart, char* str, uint32_t timeout);


#endif //STM32F412_USART_H
